Representing Social Networks with Graphs in Java
Introduction
Social networks can be effectively modeled using graph data structures. In this document, we'll explore how to represent a social network using an adjacency list in Java. We'll cover the implementation of a Graph class with functionalities to add people (vertices), create friendships (edges), check for friendships, and retrieve a person's friends.
Graph Representation
A graph consists of vertices (nodes) and edges connecting these vertices. In a social network, people are represented as vertices, and friendships between them are represented as edges.
Adjacency List
An adjacency list is a common way to represent graphs, especially sparse graphs where not all vertices are connected. It uses a map where keys are vertices, and values are lists of their adjacent vertices (neighbors).
Code Example
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Graph<T> {
   private Map<T, List<T>> adjacencyList;

   public Graph() {
       adjacencyList = new HashMap<>();
   }

   public void addVertex(T vertex) {
       if (vertex == null) {
           throw new IllegalArgumentException("Vertex cannot be null");
       }
       if (!adjacencyList.containsKey(vertex)) {
           adjacencyList.put(vertex, new ArrayList<>());
       }
   }

   public void addEdge(T vertex1, T vertex2) {
       if (vertex1 == null || vertex2 == null) {
           throw new IllegalArgumentException("Vertices cannot be null");
       }
       addVertex(vertex1);
       addVertex(vertex2);
       adjacencyList.get(vertex1).add(vertex2);
       adjacencyList.get(vertex2).add(vertex1);
   }

   public void removeEdge(T vertex1, T vertex2) {
       if (vertex1 == null || vertex2 == null) {
           throw new IllegalArgumentException("Vertices cannot be null");
       }
       if (adjacencyList.containsKey(vertex1) && adjacencyList.containsKey(vertex2)) {
           adjacencyList.get(vertex1).remove(vertex2);
           adjacencyList.get(vertex2).remove(vertex1);
       }
   }

   public void removeVertex(T vertex) {
       if (vertex == null) {
           throw new IllegalArgumentException("Vertex cannot be null");
       }
       if (adjacencyList.containsKey(vertex)) {
           for (T neighbor : adjacencyList.get(vertex)) {
               adjacencyList.get(neighbor).remove(vertex);
           }
           adjacencyList.remove(vertex);
       }
   }

   public boolean areFriends(T vertex1, T vertex2) {
       return adjacencyList.containsKey(vertex1) &&
              adjacencyList.get(vertex1).contains(vertex2);
   }

   public List<T> getFriends(T vertex) {
       return adjacencyList.getOrDefault(vertex, new ArrayList<>());
   }

   public static void main(String[] args) {
       Graph<String> socialNetwork = new Graph<>();

       // Add people to the network
       socialNetwork.addVertex("Alice");
       socialNetwork.addVertex("Bob");
       socialNetwork.addVertex("Charlie");
       socialNetwork.addVertex("David");
       socialNetwork.addVertex("Eve");

       // Create friendships
       socialNetwork.addEdge("Alice", "Bob");
       socialNetwork.addEdge("Alice", "Charlie");
       socialNetwork.addEdge("Bob", "David");
       socialNetwork.addEdge("Charlie", "Eve");

       // Test functionalities
       System.out.println("Are Alice and Bob friends? " + socialNetwork.areFriends("Alice", "Bob"));
       System.out.println("Are Alice and Eve friends? " + socialNetwork.areFriends("Alice", "Eve"));

       System.out.println("Alice's friends: " + socialNetwork.getFriends("Alice"));
       System.out.println("David's friends: " + socialNetwork.getFriends("David"));
   }
}

Explanation of the Code
Graph Class
* adjacencyList: A Map to store the graph's adjacency list representation.
* addVertex(): Adds a vertex to the graph. If the vertex already exists, it does nothing.
* addEdge(): Adds an undirected edge between two vertices.
* removeEdge(): Removes an edge between two vertices.
* removeVertex(): Removes a vertex and all its associated edges.
* areFriends(): Checks if two vertices are connected by an edge.
* getFriends(): Returns a list of neighbors for a given vertex.
main() Method
* Creates a Graph object.
* Adds vertices representing people.
* Adds edges representing friendships.
* Tests the graph functionalities.
Complexity Analysis
* addVertex(): O(1) average case, O(n) worst case (hash collisions).
* addEdge(): O(1) average case, O(n) worst case.
* removeEdge(): O(d) where d is the degree of the vertex.
* removeVertex(): O(d) where d is the degree of the vertex.
* areFriends(): O(d) where d is the degree of the vertex.
* getFriends(): O(1)
Applications
* Social networks
* Recommendation systems
* Network analysis
* Pathfinding algorithms
Best Practices
* Use generics for flexibility.
* Handle edge cases and invalid input.
* Write clear and concise code with comments.
* Test the code thoroughly.
This revised version of the document follows the principles of design outlined in the instructions. It provides a clear definition, code example, explanation, complexity analysis, applications, and best practices, enhancing its educational value and readability.
* https://github.com/sashagrona/DesignPatterns
* https://github.com/dill-larson/Maze-Generator-and-Solver
* https://github.com/FangYuan33/beauty-of-data-structure-and-algorithms